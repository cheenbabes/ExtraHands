===CALENDAR===
calendar solution
    -bootstrap calendar
        -convert event times to milliseconds unix time
        -create dict of events and then dump to json (or a list because they're ordered)
        -make sure the json is correct (eg success= {1} at the beginning)

===TEACHERS===
teacher should be able to view a list of all events that do not have a sub assigned to them yet and commit to it right then. It should prompt the teacher
whether they really want to accept the event or not. (maybe if there's been no teacher for more than 7 days, then it becomes open??)

--allow teachers to modify some things on their account
    --time in between events (in hours)

===BUSINESS LOGIC===
core business logic
--after creating an event, show a list of teachers who are available. submit another form to send out emails to the teachers.
    --create a view and url pattern that takes a list of teacher tokens and emails each of them with a unique link
    --another view and url pattern for the teachers to click on to confirm their participation in the event
--first teacher who clicks will get the event, next teachers will just get click points.
--send confirmation email to client

--probably porting the project to VS is the next step and going through deployment to azure
    --this will have to be a file by file transfer. Very painful and not fun at all.
    --Probably something like:
        -models. migrate
        -forms
        -settings
        -templates
        -views

--some kind of billing/account tracking system??
    --regular hourly rate
    --on call hourly rate
=============================================================================================

==STORY 6==
    -make sure all the click() functionality works for tracking teacher clicks

==STORY 10==
    --front end development

==STORY 11==
    --on call select-teacher view
    --should only select on-call teachers, not search for times.





ROADMAP
    --detokenize CHECK
    --clean up template logic and move to messages framework CHECK
    --logic for not emailing teachers again DONE
    --make sure teachers can't rebook the same time. DONE
    --html templates DONE
    --confirmation emails DONE
    --on-call functionality and teacher selection
    --click() logic
    --front end dev


===Accounts===
===FEATURE===
Each client has an account
An account holds many receipts
Each receipt has an event and all the details.

A receipt is sent for payment processing. Account.balance keeps track of how much the client owes.

============================================================================================================================

FINISHED STORIES

==STORY 1==DONE
    -override form.is_valid() method on EventForm and AvailableTimeForm to make sure that the end time is always
    greater than the start time


==STORY 4== DONE
    -make it possible for teachers to delete times and clients should be able to delete events IF they have not emailed any teachers yet.
    -clients should see a prompt when they go to the select teacher page on whether they want to continue as they will not be able to edit or delete the event afterwards

==STORY 3==
    -clients should be able to see which teachers they already contacted and see a notification if more teachers have become available. Also, they should not be able to
    email any teacher twice. Add a field to Event that has a list of time tokens since available teachers are shown based on individual times.
        -implementation
            --in my_account() view function, get all the available times for all the events linked to the client.
            --assign all the possible times to a list field on the event
            --the event object should have a list field of all the times that have been emailed.
            --compare all possible times with the ones that have been emailed.
            --the count of available events can be put in the myaccount page on the "View Available Teachers" button as a bootstrap notification
            --on the select-teacher page, just get the list of the all times that are available but not have yet been emailed.

==STORY 2==
    -make it so clients cannot email the same "time" again. This ties in with story 3


==STORY 5==
    -clean up all the generic_template logic and consolidate to messages framework where possible

==STORY 9==
    --detokenize the application. Tokens are NOT guaranteed to be unique. Now that there is security in place, there is no need to obfuscate urls.

==STORY 12==
    --teachers should not be able to book double times - as in, book the same thing over again.

==STORY 7==
    --sending confirmation emails to clients

==STORY 8==
    --creating html templates for emails sent out to teachers and clients





